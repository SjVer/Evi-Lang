{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Evi",
	"scopeName": "source.evi",
	"patterns": [
		{ "include": "#pre-directives" },
		{ "include": "#comments" },

		{ "include": "#declarations" },
		
		{ "include": "#operators" },
		{ "include": "#separators" },

		{ "include": "#illegals" }
	],
	"repository": 
	{


		"pre-directives":
		{
			"patterns": [
				{
					"begin": "^\\s*((#)\\s*(apply))\\b\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.directive.evi"
						},
						"2": {
							"name": "punctuation.definition.directive.evi"
						}
					},
					"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.apply.evi",
					"patterns": [
						{
							"begin": "\"",
							"beginCaptures": {
								"0": {
									"name": "punctuation.definition.string.begin.evi"
								}
							},
							"end": "\"",
							"endCaptures": {
								"0": {
									"name": "punctuation.definition.string.end.evi"
								}
							},
							"name": "string.quoted.double.apply.evi"
						},
						{ "include": "#illegals" }
					]
				},
				{
					"begin": "^\\s*((#)\\s*(flag|unflag))\\b\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.directive.evi"
						},
						"2": {
							"name": "punctuation.definition.directive.flag.evi"
						}
					},
					"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.flag.evi",
					"patterns": [
						{
							"match": "[A-z_]+[0-z_]*",
							"name": "entity.name.function.preprocessor.flag.evi"
						},
						{ "include": "#illegals" }
					]
				},
				{
					"begin": "^\\s*((#)\\s*(line))\\b\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.directive.evi"
						},
						"2": {
							"name": "punctuation.definition.directive.line.evi"
						}
					},
					"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.line.evi",
					"patterns": [
						{ "include": "#numbers" },
						{ "include": "#illegals" }
					]
				},
				{
					"begin": "^\\s*((#)\\s*(file))\\b\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.directive.evi"
						},
						"2": {
							"name": "punctuation.definition.directive.file.evi"
						}
					},
					"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.file.evi",
					"patterns": [
						{ "match": "\".*\"", "name": "string.quoted.double.evi" },
						{ "include": "#illegals" }
					]
				},
				{
					"begin": "^\\s*((#)\\s*(ifset|ifnset))\\b\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.directive.evi"
						},
						"2": {
							"name": "punctuation.definition.directive.conditional.evi"
						}
					},
					"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.flag.evi",
					"patterns": [
						{
							"match": "[A-z_]+[0-z_]*",
							"name": "entity.name.function.preprocessor.flag.evi"
						},
						{ "include": "#illegals" }
					]
				},
				{
					"match": "^\\s*((#)\\s*(else|endif))\\b\\s*",
					"captures": {
						"1": { "name": "keyword.control.directive.evi" },
						"2": { "name": "punctuation.definition.directive.conditional.evi" }
					}
				},
				{
					"begin": "^\\s*((#)\\s*(info))\\b\\s*",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.directive.evi"
						},
						"2": {
							"name": "punctuation.definition.directive.info.evi"
						}
					},
					"end": "(?=(?://|/\\*))|(?<!\\\\)(?=\\n)",
					"name": "meta.preprocessor.flag.evi",
					"patterns": [
						{
							"match": "[0-z_]+",
							"name": "punctuation.definition.directive.info.evi"
						},
						{ "include": "#illegals" }
					]
				},
				{
					"match": "^\\s*(#) ?([0-9]+)? ?(\".*\")?$",
					"captures": {
						"1": { "name": "keyword.control.directive.evi" },
						"2": { "name": "constant.numeric.decimal.evi" },
						"3": { "name": "string.quoted.double.evi" }
					},
					"name": "meta.preprocessor.linemarker.evi"
				}
			]
		},
		"comments": 
		{
			"patterns": [
				{
					"name": "comment.block.evi",
					"begin": "\\\\:",
					"end": ":\\\\"
				},
				{
					"name": "comment.line.documentation.evi",
					"match": "\\\\\\?.*$"
				},
				{
					"name": "comment.line.evi",
					"match": "\\\\.*$"
				}
			]
		},


		"declarations":
		{
			"name": "meta.declaration.evi",
			"patterns": [
				{ "include": "#pre-directives" },
				{ "include": "#comments" },

				{ "include": "#vardeclarations" },
				{ "include": "#funcdeclarations" },
				{ "include": "#statements" },
				{ "include": "#separators" },

				{ "include": "#illegals" }
			]
		},

		"vardeclarations":
		{
			"name": "meta.declaration.variable.evi",
			"match": "(%)\\s*(?:([A-z_]+[0-z_]*)(?:\\s*,\\s*([A-z_]+[0-z_]*))*)?",
			"captures": { 
				"1": { "name": "keyword.declaration.variable.evi" },
				"2": { "name": "entity.name.variable.evi" },
				"3": { "name": "entity.name.variable.evi" }
			}
		},
		"variable-initializer":
		{
			"name": "meta.declaration.variable.initializer.evi",
			"begin": " ",
			
			"patterns": [
				{ "include": "#types" },
				{ "include": "#expressions" },
				{ "match": ",", "name": "punctuation.delimeter.evi" },
				{ "include": "#illegals" }
			],
			
			"end": "(;)|$",
			"endCaptures": {
				"1": { "name": "punctuation.terminator.evi" }
			}
		},
		
		"funcdeclarations": 
		{
			"name": "meta.declaration.function.evi",
			"begin": "(@)\\s*([A-z_]+[0-z_]*)",
			"beginCaptures": {
				"0": { "name": "keyword.declaration.function.evi" },
				"1": { "name": "entity.name.function.evi" } },
			
			"patterns": [
				{ "include": "#function-type" },
				{ "include": "#illegals" }
			],

			"end": "\\s"
		},
		"function-type":
		{
			"name": "meta.declaration.function.type.evi",
			"begin": " ",

			"patterns": [
				{ "include": "#types" },
				{ "include": "#function-parameters" },
				{ "include": "#blocks" },
				{ "include": "#illegals" }
			],

			"end": "\\("
		},
		"function-parameters": 
		{
			"name": "meta.declaration.function.parameters.evi",
			"begin": "\\(",	

			"patterns": [
				{ "include": "#types" },
				{ "include": "#separators" },
				{ "include": "#illegals" }
			],

			"end": "\\)"
		},


		"statements":
		{
			"name": "meta.statement.evi",
			"patterns": [
				{ "include": "#pre-directives" },
				{ "include": "#comments" },

				{ "include": "#separators" },
				
				{ "include": "#assignment" },

				{ "include": "#keywords" },
				{ "include": "#blocks" },
				{ "include": "#expressions" }
			]
		},
		"assignment":
		{
			"begin": "(=)\\s*(?:([A-z_]+[0-z_]*)|(\\S+))",
			"beginCaptures": {
				"1": { "name": "keyword.operator.assignment.evi" },
				"2": { "name": "variable.name.evi" },
				"3": { "name": "invalid.illegal.evi" } },

			"patterns": [
				{ "include": "#expressions" },
				{ "include": "#illegals" }
			],

			"end": ";|$"
		},

		"keywords":
		{
			"patterns": [
				{
					"name": "keyword.control.flow.return.evi",
					"match": "\\~"
				},
				{
					"name": "keyword.control.flow.if.evi",
					"match": "\\?\\?"
				},
				{
					"name": "keyword.control.flow.else.evi",
					"match": "::"
				},
				{
					"name": "keyword.control.flow.loop.evi",
					"match": "\\!\\!"
				}
			]
		},
		"blocks":
		{
			"name": "meta.statement.block.evi",
			"begin": "\\{",
			"patterns": [
				{ "include": "#declarations" },
				{ "include": "#separators" }],
			"end": "\\}"
		},

		"expressions":
		{
			"name": "meta.expression.evi",
			"patterns": [
				{ "include": "#pre-directives" },
				{ "include": "#comments" },

				{ "include": "#operators" },
				{ "include": "#variables" },
				{ "include": "#numbers" },
				{ "include": "#arrays" },
				{ "include": "#strings" },
				{ "include": "#types" },

				{ "include": "#illegals" }
			]
		},
		"operators": 
		{
			"patterns": [
				{
					"name": "keyword.operator.bitwise.shift.evi",
					"match": "<<|>>|>>"
				},
				{
					"name": "keyword.operator.comparison.evi",
					"match": "==|/="
				},
				{
					"name": "keyword.operator.relational.evi",
					"match": "<=|>=|<>|<|>"
				},
				{
					"name": "keyword.operator.logical.evi",
					"match": "\\!|&&|\\|\\||\\^\\^"
				},
				{
					"name": "keyword.operator.bitwise.evi",
					"match": "&|\\^|\\|"
				},
				{
					"name": "keyword.operator.decrement.evi",
					"match": "--"
				},
				{
					"name": "keyword.operator.increment.evi",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.arithmetic.evi",
					"match": "\\*|/|-|\\+"
				},
				{
					"begin": "\\?",
					"beginCaptures": { "0": { "name": "keyword.operator.ternary.evi" } },
					
					"patterns": [ { "include": "#expressions" } ],

					"end": ":",
					"endCaptures": { "0": { "name": "keyword.operator.ternary.evi" } }
				},
				{
					"name": "punctuation.definition.accessor.evi",
					"match": "@"
				},
				{
					"begin": "\\(",
					"name": "meta.expression-grouping.evi",

					"patterns": [{ "include": "#expression" }],
					
					"end": "\\)"
				}
			]
		},


		"variables": 
		{
			"patterns": [
				{
					"name": "variable.name.evi",
					"match": "(\\$)([A-z_]+[0-z_]*)"
				},
				{
					"name": "variable.parameter.evi",
					"match": "(\\$)([0-9]+)"
				},
				{
					"begin": "([A-z_]+[0-z_]*)\\s*\\(",
					"beginCaptures": {
						"1": { "name": "entity.name.function.evi"}
					},
					"contentName": "meta.call.arguments.evi",
					
					"patterns": [
						{ "match": ",", "name": "punctuation.separator.evi" },
						{ "include": "#expressions" }
					],

					"end": "\\)"
				}
			]
		},
		"numbers": 
		{
			"patterns": [
				{
					"name": "constant.numeric.hexadecimal.evi",
					"match": "\\b0(x|X)[0-f]+\\b"
				},
				{
					"name": "constant.numeric.octal.evi",
					"match": "\\b0(c|C)[0-7]+\\b"
				},
				{
					"name": "constant.numeric.binary.evi",
					"match": "\\b0(b|B)[0-1]+\\b"
				},
				{
					"name": "constant.numeric.decimal.evi",
					"match": "\\b[0-9]+(\\.[0-9]+)?\\b"
				}
			]
		},
		"strings":
		{
			"patterns": [
				{
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.evi"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.evi"
						}
					},
					"name": "string.quoted.double.evi",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_placeholder"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.evi"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.evi"
						}
					},
					"name": "string.quoted.single.evi",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				}
			]
		},
		"arrays":
		{
			"begin": "(\\[)",
			"beginCaptures": { "1": { "name": "punctuation.array.begin.evi" }},
			
			"name": "meta.array.value.evi",
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.separator.array.evi"
				},
				{ "include": "#expressions" },
				{ "include": "#illegals" }
			],

			"end": "(\\])",
			"endCaptures": { "1": { "name": "punctuation.array.end.evi" }}
		},
		"string_escaped_char": 
		{
			"patterns": [
				{
					"match": "(?x)\\\\ (\n\\\\\t\t\t |\n[abefnprtv'\"?]   |\n[0-3]\\d{,2}\t |\n[4-7]\\d?\t\t|\nx[a-fA-F0-9]{,2} |\nu[a-fA-F0-9]{,4} |\nU[a-fA-F0-9]{,8} )",
					"name": "constant.character.escape.evi"
				},
				{
					"match": "\\\\.",
					"name": "invalid.illegal.unknown-escape.evi"
				}
			]
		},
		"string_placeholder": 
		{
			"patterns": [
				{
					"match": "(?x) %\n(\\d+\\$)?\t\t\t\t\t\t   # field (argument #)\n[#0\\- +']*\t\t\t\t\t\t  # flags\n[,;:_]?\t\t\t\t\t\t\t  # separator character (AltiVec)\n((-?\\d+)|\\*(-?\\d+\\$)?)?\t\t  # minimum field width\n(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?\t# precision\n(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n[diouxXDOUeEfFgGaACcSspn%]\t\t   # conversion type",
					"name": "constant.other.placeholder.evi"
				},
				{
					"match": "(%)(?!\"\\s*(PRI|SCN))",
					"captures": {
						"1": {
							"name": "invalid.illegal.placeholder.evi"
						}
					}
				}
			]
		},
		"types":
		{
			"patterns": [
				{
					"name": "storage.type.integer.evi",
					"match": "i1|(?:u)?i(?:(?:128)|(?:16|32|64)|(?:4|8))"
				},
				{
					"name": "storage.type.floating-point.evi",
					"match": "flt|dbl"
				},
				{
					"name": "storage.type.boolean.evi",
					"match": "bln"
				},
				{
					"name": "storage.type.null.evi",
					"match": "nll"
				},
				{
					"name": "storage.type.character.evi",
					"match": "chr"
				},
				{
					"name": "storage.modifier.pointer.evi",
					"match": "\\*"
				},
				{
					"begin": "(\\|)",
					"beginCaptures": { "1": { "name": "punctuation.definition.array.begin.evi" }},
					
					"name": "meta.array.type.evi",
					"patterns": [
						{ "include": "#numbers" },
						{ "include": "#illegals" }
					],
	
					"end": "(\\|)",
					"endCaptures": { "1": { "name": "punctuation.definition.array.end.evi" }}
				}
			]
		},


		"separators": 
		{
			"patterns": [
				{
					"name": "punctuation.bracket.evi",
					"match": "\\(|\\)"
				},
				{
					"name": "punctuation.terminator.evi",
					"match": ";"
				},
				{
					"name": "punctuation.delimiter.evi",
					"match": ","
				}
			]
		},


		"illegals":
		{
			"patterns": [
				{
					"match": "\\s+"
				},
				{
					"name": "invalid.illegal.evi",
					"match": "\\S+"
				}
			]
		}
	}
}
