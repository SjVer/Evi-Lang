\:
	Evi standard library header "std/io"
	Written by Sjoerd Vermeulen (2022)

	MIT License

	Copyright (c) 2022 Sjoerd Vermeulen

	Permission is hereby granted free of chrge to any person obtaining a copy
	of this software and associated documentation files (the "Software") to deal
	in the Software without restriction including without limitation the rights
	to use copy modify merge publish distribute sublicense and/or sell
	copies of the Software and to permit persons to whom the Software is
	furnished to do so subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND EXPRESS OR
	IMPLIED INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM DAMAGES OR OTHER
	LIABILITY WHETHER IN AN ACTION OF CONTRACT TORT OR OTHERWISE ARISING FROM
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
:\

#info apply_once
#flag __STD_IO__

#apply "std/__std_header_defs"

\ ===================================== Types ======================================

\ typedef FILE* type here?

\ =================================== Constants ====================================

\ %stderr FILE* ???;
\ %stdin FILE* ???;
\ %stdout FILE* ???;

\ ==================================== Macros ======================================

\ #macro NULL 0
%NULL nll* 0;

\ #macro EOF (-1)
%EOF i32 -1;

\ #macro SEEK_CUR 1
%SEEK_CUR i32 1;

\ #macro SEEK_END 2
%SEEK_END i32 2;

\ #macro SEEK_SET 0
%SEEK_SET i32 0;

\ =================================== Functions ====================================

\ \? Closes the stream. All buffers are flushed.
\ @fclose i32 (FILE*);

\ \? Clears the end-of-file and error indicators for the given stream.
\ @clearerr nll (FILE*);

\ \? Tests the end-of-file indicator for the given stream.
\ @feof i32 (FILE*);

\ \? Tests the error indicator for the given stream.
\ @ferror i32 (FILE*);

\ \? Flushes the output buffer of a stream.
\ @fflush i32 (FILE*);

\ \? Gets the current file position of the stream and writes it to pos.
\ @fgetpos i32 (FILE* fpos_t*);

\ \? Opens the filename pointed to by filename using the given mode.
\ @fopen FILE* (\:const:\ chr* \:const:\ chr*);

\ \? Reads data from the given stream into the array pointed to by ptr.
\ @fread sze (nll* sze sze FILE*);

\ \? Associates a new filename with the given open stream and same time closing the old file in stream.
\ @freopen FILE* (\:const:\ chr* \:const:\ chr* FILE*);

\ \? Sets the file position of the stream to the given offset. The argument offset signifies the number of bytes to seek from the given whence position.
\ @fseek i32 (FILE* long i32 i32);

\ \? Sets the file position of the given stream to the given position. The argument pos is a position given by the function fgetpos.
\ @fsetpos i32 (FILE* \:const:\ fpos_t*);

\ \? Returns the current file position of the given stream.
\ @ftell long i32 (FILE*);

\ \? Writes data from the array pointed to by ptr to the given stream.
\ @fwrite sze (\:const:\ nll* sze sze FILE*);

\? Deletes the given filename so that it is no longer accessible.
\? @param 0 the name of the file to be deleted
\? @return zero on success and -1 on error (errno is set appropriately)
@remove i32 (\:const:\ chr*);

\? Causes the filename referred to by old_filename to be changed to new_filename.
\? @param 0 the name of the file to be renamed and/or moved
\? @param 1 the new name for the file
\? @return zero on success and -1 on error (errno is set appropriately)
@rename i32 (\:const:\ chr* \:const:\ chr*);

\ \? Sets the file position to the beginning of the file of the given stream.
\ @rewind nll (FILE*);

\ \? Defines how a stream should be buffered.
\ @setbuf nll (FILE* chr*);

\ \? Another function to define how a stream should be buffered.
\ @setvbuf i32 (FILE* chr* i32 mode sze size);

\ \? Creates a temporary file in binary update mode (wb+).
\ @tmpfile FILE* (nll);

\? Generates and returns a valid temporary filename which does not exist.
\? Return value is a pointer to the C string containing the proposed name
\? for a temporary file. If str was a null pointer, this points to an internal
\? buffer that will be overwritten the next time this function is called.
\? If str was not a null pointer, str is returned. If the function fails to
\? create a suitable filename, it returns a null pointer
\? @param 0 char pointer where the proposed tempname will be stored
\? @return see function documentation
@tmpnam chr* (chr*);

\ \? Sends formatted output to a stream.
\ @fprintf i32 (FILE* \:const:\ chr* ...);

\? Sends formatted output to stdout.
\? @param 0 the format/string to print
\? @param 1 optional replacement values for the format tags
\? @return the amount of printed characteres on success, otherwise a negative number
@printf i32 (\:const:\ chr* ...);

\? Sends formatted output to a string.
\? @param 0 the pointer where the resulting string will be stored
\? @param 1 the format/string to write to the buffer
\? @param 2 optional replacement values for the format tags
\? @return the amount of written characteres on success, otherwise a negative number
@sprintf i32 (chr* \:const:\ chr* ...);

\ \? Sends formatted output to a stream using an argument list.
\ @vfprintf i32 (FILE* \:const:\ chr* va_list);

\ \? Sends formatted output to stdout using an argument list.
\ @vprintf i32 (\:const:\ chr* va_list);

\ \? Sends formatted output to a string using an argument list.
\ @vsprintf i32 (chr* \:const:\ chr* va_list);

\ \? Reads formatted input from a stream.
\ @fscanf i32 (FILE* \:const:\ chr* ...);

\? Reads formatted input from stdin.
\? @param 0 the format for the input
\? @param 1 the destinations for each inputted value
\? @return the amount of scanned values on success, otherwise EOF
@scanf i32 (\:const:\ chr* ...);

\? Reads formatted input from a string.
\? @param 0 the string that will be used as input
\? @param 1 the format for the input
\? @param 2 the destinations for each inputted value
\? @return the amount of scanned values on success, otherwise EOF
@sscanf i32 (\:const:\ chr* \:const:\ chr* ...);

\ \? Gets the next character from a stream and advances the position indicator for the stream.
\ @fgetc i32 (FILE*);

\ \? Reads a line from a stream and stores it into the string pointed to by str. It stops when either (n-1) characters are read the newline character is read or the end-of-file is reached whichever comes first.
\ @*fgets chr (chr* i32 FILE*);

\ \? Writes a to a stream and advances the position indicator for the stream.
\ @fputc i32 (i32 chr FILE*);

\ \? Writes a string to a stream up to but not including the null character.
\ @fputs i32 (\:const:\ chr* FILE*);

\ \? Gets the next character from a stream and advances the position indicator for the stream.
\ @getc i32 (FILE*);

\? Gets a character from stdin.
\? @return the character read as an unsigned char cast to an int or EOF on end of file or error
@getchar i32 ();

\? Reads a line from stdin and stores it into the string pointed to by str. It stops when either the newline character is read or when the end-of-file is reached whichever comes first.
\? @param 0 char pointer where the read line will be stored
\? @return returns the given char pointer on success, and NULL on error
@gets chr* (chr*);

\ \? Writes a character to a stream and advances the position indicator for the stream.
\ @putc i32 (i32 chr FILE*);

\? Writes a character to stdout.
\? @param 0 the character to be written
\? @return the character casted to an int on success, or EOF on error
@putchar i32 (i32);

\? Writes a string to stdout up to but not including the null character. A newline character is appended to the output.
\? @param 0 the string to be written
\? @return a positive number on success, or EOF on error
@puts i32 (\:const:\ chr*);

\ \? Pushes the character chr onto a stream so that the next character is read.
\ @ungetc i32 (i32 chr FILE*);

\? Prints a descriptive error message to stderr. First the string is printed followed by a colon and then a space.
\? @param 0 the message to print before the error itself
@perror nll (\:const:\ chr*);